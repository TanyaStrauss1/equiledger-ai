// Multi-Tenant Database Schema for EquiLedger AI Financial Assistant
// This schema ensures proper business isolation and security

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// CORE TENANT ISOLATION
// ===========================================

model Business {
  id                String   @id @default(cuid())
  name              String
  vatNumber         String?
  businessRegistration String?
  taxYearEnd        DateTime?
  complianceStatus  String   @default("pending")
  subscriptionTier  String   @default("free") // free, pro, enterprise
  subscriptionStatus String  @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  users             BusinessUser[]
  clients           Client[]
  invoices          Invoice[]
  expenses          Expense[]
  integrations      Integration[]
  complianceEvents  ComplianceEvent[]
  aiInteractions    AIInteraction[]
  
  @@map("businesses")
}

model BusinessUser {
  id          String   @id @default(cuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // User identification across channels
  whatsappNumber String?
  telegramId     String?
  email          String?
  
  // User details
  name           String?
  role           String   @default("owner") // owner, admin, user
  permissions    Json?    // Custom permissions per user
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([businessId, whatsappNumber])
  @@unique([businessId, telegramId])
  @@unique([businessId, email])
  @@map("business_users")
}

// ===========================================
// FINANCIAL DATA (TENANT-ISOLATED)
// ===========================================

model Client {
  id          String   @id @default(cuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  name        String
  phone       String?
  email       String?
  vatNumber   String?
  address     String?
  taxId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  invoices    Invoice[]
  
  @@map("clients")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model Invoice {
  id              String         @id @default(cuid())
  businessId      String
  business        Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  clientId        String
  client          Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Invoice details
  invoiceNumber   String         // Business-specific sequential number
  currency        String         @default("ZAR")
  vatIncluded     Boolean        @default(true)
  vatRate         Float          @default(0.15)
  vatAmount       Decimal        @default(0) @db.Decimal(12,2)
  status          InvoiceStatus  @default(DRAFT)
  dueDate         DateTime?
  taxYear         Int?
  
  // Compliance
  complianceChecked Boolean       @default(false)
  sequentialNumber  Int?          // For compliance reporting
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  items           InvoiceItem[]
  payments        Payment[]
  
  @@unique([businessId, invoiceNumber])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(12,2)
  
  @@map("invoice_items")
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  amount    Decimal  @db.Decimal(12,2)
  method    String   // manual, EFT, PayShap, etc.
  reference String?
  paidAt    DateTime @default(now())
  
  @@map("payments")
}

model Expense {
  id          String   @id @default(cuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  amount      Decimal  @db.Decimal(12,2)
  description String
  category    String   @default("other")
  date        DateTime @default(now())
  vatAmount   Decimal  @default(0) @db.Decimal(12,2)
  receiptUrl  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("expenses")
}

// ===========================================
// EXTERNAL INTEGRATIONS
// ===========================================

enum IntegrationType {
  XERO
  QUICKBOOKS
  BANKING
  PAYMENT_GATEWAY
}

model Integration {
  id              String           @id @default(cuid())
  businessId      String
  business        Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  type            IntegrationType
  name            String
  isActive        Boolean          @default(true)
  credentials     Json             // Encrypted credentials
  lastSyncAt      DateTime?
  syncStatus      String           @default("pending")
  settings        Json?            // Integration-specific settings
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([businessId, type, name])
  @@map("integrations")
}

// ===========================================
// AI & COMPLIANCE TRACKING
// ===========================================

model ComplianceEvent {
  id          String   @id @default(cuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  eventType   String
  eventData   Json
  timestamp   DateTime @default(now())
  
  @@map("compliance_events")
}

model AIInteraction {
  id              String   @id @default(cuid())
  businessId      String
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  channel         String   // whatsapp, telegram, web
  inputText       String
  intent          String?
  confidence      Float?
  responseText    String?
  processingTimeMs Int?
  
  createdAt       DateTime @default(now())
  
  @@map("ai_interactions")
}

// ===========================================
// AUDIT & SECURITY
// ===========================================

model AuditLog {
  id          String   @id @default(cuid())
  businessId  String?  // Nullable for system-wide events
  
  userId      String?
  action      String
  resource    String
  resourceId  String?
  oldData     Json?
  newData     Json?
  ipAddress   String?
  userAgent   String?
  
  timestamp   DateTime @default(now())
  
  @@map("audit_logs")
}
